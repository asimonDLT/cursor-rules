---
rule_type: Auto Attached
globs:
  - "*prd.md"
  - "*PRD.md"
  - "*requirements.md"
  - "*_prd_*"
  - "requirements/**/*.md"
  - "docs/prd/**/*.md"
description: "Project Requirements Document (PRD) Standards & Templates"
---

# Project Requirements Document (PRD) Standards

## Core PRD Principles
- **Measurable Objectives**: Every goal must have specific, quantifiable success criteria
- **Developer-Ready**: Requirements must be specific enough for immediate development without clarification
- **Risk Awareness**: Identify dependencies, constraints, and failure modes upfront
- **Clear Ownership**: Eliminate ambiguity in roles, responsibilities, and decision-making authority
- **Timeline Reality**: Include realistic estimates with risk buffers and dependency management
- **Quality Gates**: Define clear go/no-go criteria for major milestones

## Standard PRD Template Structure

When creating a new PRD, always use this 12-section structure:

### 1. Document Meta (Always First)
```markdown
| Field                | Value                                    |
|:---------------------|:-----------------------------------------|
| **Title & Version**  | [Project Name] – Project Requirements v1.0 |
| **Author / Owner**   | [Your Name]                              |
| **Approvers & Date** | [Pending / Name - Date]                  |
| **Status**           | Draft                                    |
```

### 2. Executive Summary
**Target**: ≤200 words covering:
- Project purpose and business value
- 2-3 key success criteria with metrics
- High-level timeline and constraints
- Primary risks and mitigation approach

### 3. Goals & Objectives
**Format**: Table mapping strategic goals to measurable objectives
- Include specific numerical targets
- Separate "Must Have" from "Nice to Have" goals
- Define success principles that guide trade-off decisions

### 4. Stakeholders & Roles (RACI Matrix)
**Required columns**: Role, Person, Accountable, Responsible, Consulted, Informed
- Single point of accountability for each decision area
- Clear escalation paths for conflicts

### 5. User Personas & Key Journeys
**Format**: Table with Persona → Key Journey mapping
- Include specific user flows with conversion points
- Define success metrics for each journey

### 6. Functional Requirements
**Structure**: Hierarchical numbering (FR-1.0, FR-1.1)
- MoSCoW prioritization (Must/Should/Could/Won't)
- Specific, testable acceptance criteria
- Document deferred features with rationale

### 7. Non-Functional Requirements (NFR)
**Categories**: Performance, Security, Scalability, Availability, Cost
- Specific measurable targets (response times, uptime, cost limits)
- Monitoring and validation approach

### 8. Success Metrics & Guardrails
- Primary business metrics with measurement methods
- Hard limits that trigger escalation
- Quality gates for major milestones

### 9. Compliance & Legal
- Data privacy requirements (GDPR, CCPA, etc.)
- Industry-specific compliance needs
- Licensing and third-party considerations

### 10. Assumptions & Constraints
- Environmental and dependency assumptions
- Technical, budget, and timeline constraints

### 11. Dependencies & Risks
**Format**: Structured tables with owners and mitigation plans
- Dependencies: Owner, Impact if Delayed, Mitigation
- Risks: Probability, Impact, Mitigation with specific owners

### 12. Milestones & Timeline
- Logical delivery phases with clear deliverables
- Go-live criteria checklist
- Risk buffers and critical path dependencies

## Writing & Formatting Standards

### Language Requirements
- **Developer-Ready Clarity**: Write requirements specific enough for immediate implementation
- **Present Tense**: Use present tense for requirements ("System validates user input")
- **Active Voice**: Prefer active over passive constructions
- **Quantified Targets**: Replace vague terms ("fast", "scalable") with specific metrics
- **Precise Terminology**: Use exact technical terms; avoid marketing language

### Numerical Precision
- **Always Include Units**: Time (seconds/ms), size (MB/GB), currency ($USD), percentages (%)
- **Specific Ranges**: "5-10 concurrent users" vs "multiple users"
- **Baseline Context**: "20% improvement from current 5s load time" vs "20% faster"
- **Measurable Criteria**: "≤2s response time for 95% of requests" vs "fast response"

### Table Formatting Standards
**Use consistent table structures:**

```markdown
| ID          | Requirement               | Priority | Acceptance Criteria        |
|:------------|:--------------------------|:---------|:---------------------------|
| **FR-1.0**  | [Specific requirement]    | Must     | [Testable criteria]        |
```

```markdown
| Role          | Person    | Accountable | Responsible | Consulted | Informed |
|:--------------|:----------|:-----------:|:-----------:|:---------:|:--------:|
| **Tech Lead** | [Name]    |      ✓      |      ✓      |           |          |
```

### Visual Hierarchy
- **Critical Items**: Use ⚠️ for warnings, ✅ for success criteria, 📝 for important notes
- **Emphasis**: Use blockquotes for critical guardrails and escalation policies
- **Code Specs**: Use code blocks for technical configurations and API examples
- **Consistent Headers**: Follow ATX-style (`#`) with proper spacing

## PRD Generation Guidelines

When generating a new PRD from a project concept:

### Content Development Process
1. **Extract Core Requirements**: Identify the essential "what" and "why" from the project description
2. **Define Success Metrics**: Convert business goals into measurable, time-bound objectives
3. **Identify Stakeholders**: Determine all parties impacted by or contributing to the project
4. **Map User Journeys**: Create specific user flows that deliver the core value proposition
5. **Technical Breakdown**: Translate features into functional and non-functional requirements
6. **Risk Assessment**: Identify dependencies, constraints, and potential failure modes
7. **Timeline Estimation**: Create realistic milestones with appropriate risk buffers

### Industry Best Practices
- **SMART Objectives**: Specific, Measurable, Achievable, Relevant, Time-bound
- **Definition of Done**: Clear criteria for when features/milestones are complete
- **Dependency Mapping**: Identify and plan for all external dependencies
- **Risk Mitigation**: For each identified risk, include specific mitigation strategies
- **Quality Gates**: Define checkpoints that must pass before proceeding
- **Rollback Plans**: Document how to safely revert if issues arise

## Quality Validation Checklist

Before considering a PRD complete, verify:

### Content Completeness
- [ ] **Executive Summary**: ≤200 words with specific success metrics
- [ ] **Measurable Objectives**: All goals have numerical targets and timeframes
- [ ] **Developer Clarity**: Requirements are specific enough for immediate development
- [ ] **Acceptance Criteria**: Each requirement has testable completion criteria
- [ ] **RACI Matrix**: Clear single point of accountability for each decision area

### Risk & Dependency Management
- [ ] **Risk Ownership**: All medium/high risks have assigned owners and mitigation plans
- [ ] **Dependency Tracking**: External dependencies identified with impact assessments
- [ ] **Timeline Buffers**: Realistic estimates with 10-20% risk buffers included
- [ ] **Escalation Paths**: Clear procedures for handling blocked dependencies

### Technical Readiness
- [ ] **Go-Live Criteria**: Specific, testable checklist for production deployment
- [ ] **Performance Targets**: Quantified non-functional requirements
- [ ] **Security Requirements**: Data handling and compliance needs documented
- [ ] **Monitoring Plan**: How success metrics will be measured and tracked

## Common Anti-Patterns to Avoid

### Vague Requirements
- ❌ "System should be fast and reliable"
- ✅ "System responds within 2s with 99.9% uptime"

### Missing Ownership
- ❌ "Security review needed"
- ✅ "Security review by [Specific Person] by [Date]"

### Unmeasurable Success
- ❌ "Improve user satisfaction"
- ✅ "Increase NPS from 7 to 8.5 within 6 months"

### Optimistic Planning
- ❌ "3-week development cycle"
- ✅ "3-week development + 20% buffer (3.6 weeks)"

### Developer Ambiguity
- ❌ "Intuitive user interface"
- ✅ "≤3 clicks to complete primary user task with task completion rate >90%"

## Integration with Development Standards

### Markdown Compliance
- Follow all formatting rules defined in `markdown.mdc`
- Use ATX-style headers (`#`) with consistent spacing
- Include Table of Contents for documents with >3 major sections
- Use reference-style links for external resources

### Technical Integration
- Reference specific technology standards (Python, TypeScript, AWS, etc.) when applicable
- Include CI/CD pipeline requirements and deployment strategies
- Document testing requirements and quality assurance procedures
- Specify monitoring, logging, and observability needs

### Security & Compliance Framework
- Document data handling requirements and privacy considerations
- Include security review checkpoints in project timeline
- Address regulatory compliance requirements early
- Specify audit trail and logging requirements

### Workflow Compatibility
- Ensure requirements align with existing development standards
- Reference appropriate infrastructure and deployment patterns
- Include version control and branch strategy considerations
- Document handoff procedures between teams and phases
