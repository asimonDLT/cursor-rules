---
rule_type: Auto Attached
globs:
  - "*_spec.md"
  - "*spec.md"
  - "design/**/*.md"
  - "specifications/**/*.md"
  - "specs/**/*.md"
description: "Generic Design Specification Documentation Standards"
---

# Generic Design Specification Documentation Standards

**Purpose**: Create comprehensive, implementation-ready design specifications for any project type that enable developers to build without ambiguity.

## Document Structure & Organization

### Required Header Format
- **Title Format:** `# [Project/Feature Name] Design Specification`
- **Metadata Block:** Include Version, Date, Author with consistent formatting
- **Separator:** Use `---` after metadata block
- **Table of Contents:** Auto-generate for documents with 4+ major sections

```markdown
# [Project Name] Design Specification
**Version**: 1.0
**Date**: [Date]  
**Author**: [Author Name] / [Organization]
**Status**: [Draft/In Review/Approved]

---

## Contents
1. [Overview & Purpose](#1-overview--purpose)
2. [System Architecture](#2-system-architecture)
3. [Technical Requirements](#3-technical-requirements)
4. [Implementation Approach](#4-implementation-approach)
5. [Quality Assurance](#5-quality-assurance)
...
```

### Standard Section Hierarchy
Adapt sections based on project type, but maintain this general flow:

1. **Overview & Purpose** - Executive summary, scope, stakeholders, success criteria
2. **Requirements Summary** - Functional and non-functional requirements
3. **System Architecture** - High-level architecture, component diagrams, technology stack
4. **Technical Specifications** - Detailed technical requirements, data models, APIs
5. **Implementation Approach** - Development strategy, technical decisions, patterns
6. **Security & Compliance** - Security requirements, authentication, data protection
7. **Quality Assurance** - Testing strategy, acceptance criteria, performance targets
8. **Operational Considerations** - Deployment, monitoring, maintenance
9. **Appendices** - Configuration details, reference materials, glossary

## Mermaid Diagram Standards

### Architecture Diagrams
- **Always include** proper initialization with consistent styling
- **Default theme:** Use `theme: 'base'` unless otherwise specified to maintain a clean, professional look
- **Use semantic colors:** Green for user-facing, blue for services, red for external dependencies
- **Clear labeling:** All nodes should have descriptive, business-meaningful labels

```mermaid
%%(init: {"flowchart": {"htmlLabels": false}, "theme": 'base', "fontSize": 14, "fontFamily": 'Arial', "lineWidth": 200})
flowchart TD
    %% CLASS STYLES
    classDef userFacing fill:#e8f5e9,stroke:#2e7d32,color:#1b5e20;
    classDef service fill:#e3f2fd,stroke:#1976d2,color:#0d47a1;
    classDef external fill:#ffebee,stroke:#c62828,color:#b71c1c;

    USER[User Interface] --> API[API Gateway]
    API --> SERVICE[Core Service]
    SERVICE --> DB[Database]
    
    class USER userFacing
    class API,SERVICE service
    class DB external
```

### Data Model Diagrams
- **Entity relationships:** Use proper cardinality notation (`||--o{`, `}o--||`)
- **Field format:** `fieldName dataType "Description"`
- **Consistent styling:** Apply semantic colors based on entity types

```mermaid
%%(init: {"erDiagram": {"htmlLabels": false}, "theme": 'base', "fontSize": 14, "fontFamily": 'Arial', "lineWidth": 200})
erDiagram
    %% CLASS STYLES
    classDef core fill:#e8f5e9,stroke:#2e7d32,color:#1b5e20;
    classDef supporting fill:#fff3e0,stroke:#f57c00,color:#e65100;

    ENTITY_NAME {
        id string "Primary Key"
        name string "Display Name"
        created_at datetime "Creation Timestamp"
    }
    
    class ENTITY_NAME core
```

### Flowcharts
- **Use descriptive node labels** with business context
- **Apply consistent styling** with classDef for user-visible vs automated processes
- **Include decision points** with clear yes/no paths

### Sequence Diagrams
- **Number steps** with `autonumber`
- **Use business-friendly participant names**
- **Include system boundaries** with notes for different environments

## Technical Specifications Format

### API Specification Tables
Use consistent property tables for API endpoints and data structures:

```markdown
#### Endpoint Name

| Property        | Value                                   |
|-----------------|-----------------------------------------|
| **Method**      | GET/POST/PUT/DELETE                    |
| **Path**        | `/api/v1/resource/{id}`                |
| **Content-Type**| `application/json`                     |
| **Authentication** | Required/Optional/None               |
| **Rate Limit**  | Requests per minute                    |
| **Description** | Business purpose and usage             |
| **Request Body**| JSON schema or example                 |
| **Response**    | Success/error response examples        |
| **Notes**       | Implementation details and constraints |
```

### Data Structure Specifications
For database schemas, data models, or configuration structures:

```markdown
#### Structure Name

| Field           | Type        | Required | Default     | Description                    |
|-----------------|-------------|----------|-------------|--------------------------------|
| **id**          | string      | Yes      | generated   | Unique identifier              |
| **name**        | string      | Yes      | none        | Display name                   |
| **created_at**  | datetime    | Yes      | now()       | Creation timestamp             |
| **metadata**    | object      | No       | {}          | Additional properties          |
```

### Naming Conventions
- **Consistent casing:** Use project-appropriate conventions (camelCase, snake_case, kebab-case)
- **Descriptive names:** Use clear, business-meaningful terminology
- **Required vs Optional:** Explicitly state requirement levels
- **Cross-References:** Link to related components using proper markdown anchors

### Technical Documentation Guidelines
In specification tables, the **'Description'** should explain the business purpose for stakeholders. The **'Notes'** should contain implementation details, constraints, or technical dependencies for developers.

## Requirements & Rules Documentation

### Business Logic Tables
- **Use markdown tables** with clear condition → outcome format
- **Include edge cases** and default behaviors
- **Order by specificity** (most specific conditions first)

| Input Condition A | Input Condition B | Business Rule | Expected Output |
|:------------------|:------------------|:--------------|:----------------|
| Value X           | Value Y           | Rule 1        | Result A        |
| Value X           | Any Other         | Rule 2        | Result B        |
| Any Other         | Any Other         | Default       | Default Result  |

### Acceptance Criteria
Use clear Given-When-Then format for testable requirements:

```gherkin
Scenario: [Descriptive scenario name]
  Given [initial system state]
    And [additional preconditions]
  When [user action or system event]
  Then [expected system response]
    And [additional verification points]
```

### Functional Requirements
Structure requirements with clear priority and acceptance criteria:

```markdown
#### REQ-001: [Requirement Title]
**Priority**: High/Medium/Low
**Description**: Clear statement of what the system must do
**Acceptance Criteria**:
- [ ] Specific, testable condition 1
- [ ] Specific, testable condition 2
- [ ] Edge case handling
**Dependencies**: List any dependent requirements
```

## Cross-Referencing & Navigation

### Internal Links
- **Section References:** Use descriptive anchor text: `[Section Name](#section-anchor)`
- **Appendix References:** Always reference appendices for detailed information
- **Field References:** Link between related fields and objects
- **Example Pattern:** "See [Campaign Member Status Matrix](#campaign-member-status-matrix) for complete status definitions"

### External References
- **API Documentation:** Reference Salesforce standard objects and fields
- **Related Specs:** Link to dependent or related design specifications
- **Technical Documents:** Reference implementation guides and configuration docs

## Table Formatting Standards

### Data Tables
- **Left-align text** columns, **right-align numeric** columns
- **Use consistent column widths** where possible
- **Include headers** that clearly describe content
- **Bold important values** for emphasis

### Status and Legend Tables
- **Use symbols consistently:** `D` for Default, `▲` for Has Responded
- **Include legend** at top of section for symbol meanings
- **Group related statuses** logically

## Code Examples & Technical Details

### Code Block Standards
- **Use proper language tags:** Choose appropriate syntax highlighting
- **Include meaningful comments** explaining business logic and complex sections
- **Use descriptive variable names** following project conventions
- **Format with proper indentation** and consistent style

```typescript
// Example: Clear, commented code with business context
interface UserPreferences {
  theme: 'light' | 'dark';
  notifications: boolean;
  language: string;
}

// Validates user preferences against business rules
function validatePreferences(prefs: UserPreferences): ValidationResult {
  const errors: string[] = [];
  
  // Business rule: Default theme for accessibility
  if (!prefs.theme) {
    prefs.theme = 'light';
  }
  
  return { isValid: errors.length === 0, errors };
}
```

### Configuration Examples
- **YAML/JSON:** Use proper syntax highlighting and validate structure
- **Environment Variables:** Document all required configuration
- **CLI Commands:** Use `bash` or `powershell` tags with clear explanations

```yaml
# Example: Complete configuration with comments
api:
  version: v1
  base_url: https://api.example.com
  timeout: 30s
  
security:
  cors_origins: 
    - https://app.example.com
  rate_limit: 1000  # requests per hour
```

## Security & Compliance Sections

### Security Requirements
- **Authentication:** Document authentication methods and session management
- **Authorization:** Define role-based access control and permissions
- **Data Protection:** Include encryption, data handling, and privacy considerations
- **Input Validation:** Document all validation rules and sanitization requirements
- **Audit Requirements:** Define logging, monitoring, and compliance tracking needs

### Performance & Scalability
- **Performance Targets:** Define measurable SLAs and response time requirements
- **Scalability Requirements:** Document expected load and scaling approaches
- **Error Handling:** Document failure scenarios, recovery procedures, and fallback strategies
- **Resource Limits:** Include bandwidth, storage, and computational constraints

## Version Control & Change Management

### Version History Table
Include at end of document:

```markdown
### Version History

| Version | Date       | Description              | Author        |
|:--------|:-----------|:-------------------------|:--------------|
| 1.0     | YYYY-MM-DD | Initial specification   | Author Name   |
| 1.1     | YYYY-MM-DD | Added business rules    | Author Name   |
```

### Change Documentation
- **Track all modifications** with version increments
- **Include rationale** for significant changes
- **Reference related tickets** or requirements when applicable

## Quality Standards

### Content Requirements
- **Complete Examples:** Provide full, working examples rather than placeholders
- **Design Rationale:** Explain why each technical decision was made
- **Technical Accuracy:** Verify all APIs, configurations, and technical details
- **Consistency:** Use consistent terminology, naming conventions, and formatting throughout
- **Implementation Ready:** Provide sufficient detail for developers to implement without ambiguity

### Review Checklist
- [ ] All sections follow standard hierarchy appropriate for project type
- [ ] Mermaid diagrams render correctly with proper styling and semantic colors
- [ ] Technical specifications include all required properties and examples
- [ ] Requirements are comprehensive with clear acceptance criteria
- [ ] Cross-references work and point to correct sections
- [ ] Version history is updated with meaningful change descriptions
- [ ] Security and compliance considerations are addressed
- [ ] Test scenarios cover all functional requirements and edge cases
- [ ] Implementation approach provides clear guidance for development team